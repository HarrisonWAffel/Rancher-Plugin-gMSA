#!/bin/bash
set -e

source $(dirname $0)/version

cd $(dirname $0)/..

mkdir -p dist/artifacts
cp bin/* dist/artifacts

IMAGES=("gmsa-account-provider" "ccg-plugin-installer")
NANOSERVER_VERSIONS=("ltsc2019" "ltsc2022")

TEMP_DOCKER_SUFFIX=""
if [ "$OS" = "windows" ]; then
  TEMP_DOCKER_SUFFIX=".windows"
fi

for i in "${IMAGES[@]}"; do
  IMAGE=${REPO}/"$i":${TAG}
  DOCKERFILE="package/$i/Dockerfile${TEMP_DOCKER_SUFFIX}"

  FINAL_IMAGES=()
  if [ "$OS" = "windows" ]; then
      for v in "${NANOSERVER_VERSIONS[@]}"; do
        # append the nano-server version to the image tag
        IMAGE=${REPO}/"$i":${TAG}-${v}
        docker build --build-arg "ARCH=${ARCH}" --build-arg "OS=${OS}" --build-arg="NANOSERVER_VERSION=${v}" -f ${DOCKERFILE} -t ${IMAGE}  .
        FINAL_IMAGES+=("${IMAGE}")
        echo Built ${IMAGE} for nanoserver version ${v}
      done

      MULTI_ARCH_CMD=""
      # create multi-arch manifest
      for v in "${FINAL_IMAGES[@]}"; do
        MULTI_ARCH_CMD+="--amend $v "
      done
      # todo; this doesn't always work on windows servers
      # docker manifest create "${REPO}/$i:${TAG}" ${MULTI_ARCH_CMD}

    else
      # don't try to build if the file doesn't exist
      if [ -f ${DOCKERFILE} ]; then
        docker build --build-arg "ARCH=${ARCH}" --build-arg "OS=${OS}"  -f ${DOCKERFILE} -t ${IMAGE} .
        echo Built ${IMAGE}
      fi
  fi
done

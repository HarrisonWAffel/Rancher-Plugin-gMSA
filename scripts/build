#!/bin/bash
set -e

source $(dirname $0)/version

cd $(dirname $0)/..

mkdir -p bin
if [ "$(uname)" = "Linux" ]; then
    OTHER_LINKFLAGS="-extldflags -static -s"
fi
LINKFLAGS="-X github.com/rancher/Rancher-Plugin-gMSA/pkg/version.Version=$VERSION"
LINKFLAGS="-X github.com/rancher/Rancher-Plugin-gMSA/pkg/version.GitCommit=$COMMIT $LINKFLAGS"

function build-binaries() {
  if [[ -z "$1" ]]; then
    echo "Usage: build-binaries <app>"
    exit 1
  fi
  APP=$1
  if [[ "$CROSS" = "true" ]]; then
    OS_ARCH=( "linux amd64" "linux arm64" "darwin amd64" "darwin arm64" "windows amd64")
    for os_arch in "${OS_ARCH[@]}"; do
      local os=$(echo $os_arch | cut -d' ' -f1)
      local arch=$(echo $os_arch | cut -d' ' -f2)
      local suffix=${os}-${arch}
      if [[ "${os}" == "windows" ]]; then
        suffix="${suffix}.exe"
      fi
      GOOS="${os}" GOARCH="${arch}" CGO_ENABLED=0 go build -ldflags "$LINKFLAGS $OTHER_LINKFLAGS" -o bin/${APP}-${suffix} ./cmd/${APP}
    done
    else
      if [[ "${OS}" == "windows" ]]; then
        GOOS="${OS}" GOARCH="${ARCH}" CGO_ENABLED=0 go build -ldflags "$LINKFLAGS $OTHER_LINKFLAGS" -o bin/${APP}-${OS}-${ARCH}.exe ./cmd/${APP}
      else
        GOOS="${OS}" GOARCH="${ARCH}" CGO_ENABLED=0 go build -ldflags "$LINKFLAGS $OTHER_LINKFLAGS" -o bin/${APP}-${OS}-${ARCH} ./cmd/${APP}
      fi
  fi
}

for app in $(find ./cmd -type d -mindepth 1 -maxdepth 1 | cut -d'/' -f3); do
  echo "Building binaries for $app..."
  build-binaries $app
done
